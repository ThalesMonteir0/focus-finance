// Code generated by MockGen. DO NOT EDIT.
// Source: src/models/repository/user_repository.go
//
// Generated by this command:
//
//	mockgen -source=src/models/repository/user_repository.go -destination=src/tests/mocks/user_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	rest_err "focus-finance/src/configuration/rest_err"
	models "focus-finance/src/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUserRepository mocks base method.
func (m *MockUserRepositoryInterface) CreateUserRepository(arg0 models.UserDomainInterface) (models.UserDomainInterface, *rest_err.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRepository", arg0)
	ret0, _ := ret[0].(models.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestErr)
	return ret0, ret1
}

// CreateUserRepository indicates an expected call of CreateUserRepository.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateUserRepository(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRepository", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateUserRepository), arg0)
}

// DeleteUserRepository mocks base method.
func (m *MockUserRepositoryInterface) DeleteUserRepository(arg0 int) *rest_err.RestErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRepository", arg0)
	ret0, _ := ret[0].(*rest_err.RestErr)
	return ret0
}

// DeleteUserRepository indicates an expected call of DeleteUserRepository.
func (mr *MockUserRepositoryInterfaceMockRecorder) DeleteUserRepository(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRepository", reflect.TypeOf((*MockUserRepositoryInterface)(nil).DeleteUserRepository), arg0)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepositoryInterface) FindUserByEmail(arg0 string) (models.UserDomainInterface, *rest_err.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", arg0)
	ret0, _ := ret[0].(models.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestErr)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryInterfaceMockRecorder) FindUserByEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).FindUserByEmail), arg0)
}

// FindUserByID mocks base method.
func (m *MockUserRepositoryInterface) FindUserByID(arg0 int) (models.UserDomainInterface, *rest_err.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", arg0)
	ret0, _ := ret[0].(models.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestErr)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) FindUserByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).FindUserByID), arg0)
}

// UpdateUserRepository mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserRepository(arg0 models.UserDomainInterface, arg1 int) *rest_err.RestErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRepository", arg0, arg1)
	ret0, _ := ret[0].(*rest_err.RestErr)
	return ret0
}

// UpdateUserRepository indicates an expected call of UpdateUserRepository.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserRepository(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRepository", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserRepository), arg0, arg1)
}
